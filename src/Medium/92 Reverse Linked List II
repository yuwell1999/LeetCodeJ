package Medium;

/**
 * Definition for singly-linked list.
 * public class ListNode {
 * int val;
 * ListNode next;
 * ListNode() {}
 * ListNode(int val) { this.val = val; }
 * ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution_92 {
    public ListNode reverseBetween(ListNode head, int left, int right) {
//        ListNode dummy = new ListNode(-1);
//        dummy.next = head;
//
//        ListNode pre = dummy;
//        // 找到left前一个节点
//        for(int i=0;i<left-1;i++){
//            pre = pre.next;
//        }
//
//        ListNode rightNode = pre;
//        // 找到right节点
//        for(int i=0;i<right-left+1;i++){
//            rightNode = rightNode.next;
//        }
//
//        // 获取子链表
//        ListNode leftNode = pre.next;
//        ListNode cur = rightNode.next;
//
//        // 切断链接
//        pre.next = null;
//        rightNode.next = null;
//
//        reverseLinkedList(leftNode);
//
//        // 接回
//        pre.next = rightNode;
//        leftNode.next = cur;
//        return dummy.next;
//
//    }
//
//    private void reverseLinkedList(ListNode node){
//        ListNode pre = null;
//        ListNode cur = node;
//
//        while(cur!=null){
//            ListNode next = cur.next;
//            cur.next = pre;
//            pre = cur;
//            cur = next;
//        }
//    }

        // 一次遍历
        ListNode dummy = new ListNode(-1);
        dummy.next = head;
        ListNode pre = dummy; // 永远指向left的前一个节点

        for (int i = 0; i < left - 1; i++) {
            pre = pre.next;
        }

        ListNode cur = pre.next; // 永远指向反转区域的第一个节点left
        ListNode next; // 永远指向cur下一个节点
        for (int i = 0; i < right - left; i++) {
            next = cur.next;
            cur.next = next.next;
            next.next = pre.next;
            pre.next = next;
        }

        return dummy.next;
    }
}