package Medium;

class Solution_5 {
    public String longestPalindrome(String s) {
//        // dp
//        // 用P(i,j)表示s[i:j]是否为回文串,其中不是的情况有两种：s[i:j]本身不为回文串，还有i>j
//        // P(i,j) = P(i+1,j-1)&&(s[i]==s[j])
//        // 边界条件 P(i,i)=true; p(i,i+1) = (s[i]==s[i+1])
//
//        int n = s.length();
//        boolean[][] dp = new boolean[n][n];
//        String ans = "";
//
//        for (int l = 0; l < n; l++) { // 回文串长度
//            for (int i = 0; i + l < n; i++) { // 控制回文串长度不超过n，i为回文串开始位置
//                int j = i + l;
//                if (l == 0) {
//                    dp[i][j] = true;
//                } else if (l == 1) {
//                    dp[i][j] = (s.charAt(i) == s.charAt(j));
//                } else {
//                    dp[i][j] = (s.charAt(i) == s.charAt(j) && dp[i + 1][j - 1]);
//                }
//
//                if (dp[i][j] && l + 1 > ans.length()) {
//                    ans = s.substring(i, i + l + 1);
//                }
//            }
//        }
//
//        return ans;
        if (s == null || s.length() < 1) {
            return "";
        }

        int start = 0, end = 0;
        for (int i = 0; i < s.length(); i++) {
            int l1 = expandAroundCenter(s, i, i);
            int l2 = expandAroundCenter(s, i, i + 1);
            int len = Math.max(l1, l2);

            if (len > end - start) {
                start = i - (len - 1) / 2;
                end = i + len / 2;
            }
        }

        return s.substring(start, end + 1);
    }

    public int expandAroundCenter(String s, int left, int right) {
        // 枚举所有的回文中心，并尝试扩展
        while (left >= 0 && right < s.length() && s.charAt(left) == s.charAt(right)) {
            --left;
            ++right;
        }
        return right - left - 1;
    }
}