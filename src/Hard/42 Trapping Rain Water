package Hard;

class Solution_42 {
    public int trap(int[] height) {
        if (height == null || height.length == 0) {
            return 0;
        }

        int ans = 0;
        int size = height.length;

        // 方法一 暴力法
//        for (int i = 0; i < size; i++) {
//            int max_left = 0, max_right = 0;
//
//            for (int j = i; j >= 0; j--) {
//                max_left = Math.max(max_left, height[j]);
//            }
//
//            for (int j = i; j < size; j++) {
//                max_right = Math.max(max_right, height[j]);
//            }
//
//            ans += Math.min(max_left, max_right) - height[i];
//        }

//        // 方法二 dp
//        int[] left_max = new int[size];
//        int[] right_max = new int[size];
//
//        // 从左开始扫描，到右端最高的高度块
//        left_max[0] = height[0];
//        for (int i = 1; i < size; i++) {
//            left_max[i] = Math.max(height[i], left_max[i - 1]);
//        }
//
//        // 从右开始扫描，到右端最高的高度块
//        right_max[size - 1] = height[size - 1];
//        for (int i = size - 2; i >= 0; i--) {
//            right_max[i] = Math.max(height[i], right_max[i + 1]);
//        }
//
//        for (int i = 0; i < size; i++) {
//            ans += Math.min(right_max[i], left_max[i]) - height[i];
//        }

        // 方法三 双指针
        int left = 0, right = size - 1;
        int left_max = 0, right_max = 0;

        while (left < right) {
            if (height[left] < height[right]) {
                if (height[left] >= left_max) {
                    left_max = height[left];
                } else {
                    ans += left_max - height[left];
                }

                ++left;
            } else {
                if (height[right] >= right_max) {
                    right_max = height[right];
                } else {
                    ans += right_max - height[right];
                }

                --right;
            }
        }

        return ans;
    }
}