package Easy;

import java.util.HashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Set;

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 * int val;
 * TreeNode left;
 * TreeNode right;
 * TreeNode(int x) { val = x; }
 * }
 */
class Solution_653 {
    public boolean findTarget(TreeNode root, int k) {
//        Set<Integer> hs = new HashSet<>();
//
//        return helper(root,k,hs);
//    }
//
//    public boolean helper(TreeNode root, int target, Set<Integer> hs){
//        if(root==null){
//            return false;
//        }
//        if(hs.contains(target-root.val)){
//            return true;
//        }
//
//        hs.add(root.val);
//
//        return helper(root.left,target,hs)||helper(root.right,target,hs);
//    }

        List<Integer> list = new LinkedList<>();

        inorder(root, list);

        int left = 0, right = list.size() - 1;

        while (left < right) {
            int sum = list.get(left) + list.get(right);
            if (sum == k) {
                return true;
            }
            if (sum < k) {
                left++;
            } else {
                right--;
            }
        }

        return false;
    }

    public void inorder(TreeNode root, List<Integer> list) {
        if (root == null) {
            return;
        }
        inorder(root.left, list);
        list.add(root.val);
        inorder(root.right, list);
    }
}