package Easy;

/**
 * Definition for singly-linked list.
 * class ListNode {
 * int val;
 * ListNode next;
 * ListNode(int x) {
 * val = x;
 * next = null;
 * }
 * }
 */
class Solution_141 {
    public boolean hasCycle(ListNode head) {
//        // HashSet
//        Set<ListNode> hs = new HashSet<>();
//        while(head!=null){
//            if(hs.contains(head)){
//                return true;
//            }else{
//                hs.add(head);
//            }
//            head  = head.next;
//        }
//        return false;
        if (head == null || head.next == null) {
            return false;
        }

        ListNode fast = head.next, slow = head;

        while (slow != fast) {
            if (fast == null || fast.next == null) {
                return false;
            }
            slow = slow.next;
            fast = fast.next.next;
        }

        return true;
    }
}